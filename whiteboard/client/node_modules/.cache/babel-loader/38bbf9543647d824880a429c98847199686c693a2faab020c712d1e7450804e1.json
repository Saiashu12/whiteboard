{"ast":null,"code":"var _jsxFileName = \"C:\\\\whiteboard\\\\client\\\\src\\\\components\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport socket from \"../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingCanvas = ({\n  roomId,\n  color,\n  width\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [drawing, setDrawing] = useState(false);\n\n  // Util to get coordinates from mouse/touch\n  const getCoordinates = e => {\n    var _e$touches, _e$touches$, _e$touches2, _e$touches2$;\n    const rect = canvasRef.current.getBoundingClientRect();\n    const clientX = e.clientX || ((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : (_e$touches$ = _e$touches[0]) === null || _e$touches$ === void 0 ? void 0 : _e$touches$.clientX);\n    const clientY = e.clientY || ((_e$touches2 = e.touches) === null || _e$touches2 === void 0 ? void 0 : (_e$touches2$ = _e$touches2[0]) === null || _e$touches2$ === void 0 ? void 0 : _e$touches2$.clientY);\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  };\n\n  // Local canvas draw utility\n  const drawPath = ({\n    path,\n    color,\n    width\n  }) => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    if (!path || path.length < 2) return;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineJoin = \"round\";\n    ctx.lineCap = \"round\";\n    ctx.beginPath();\n    ctx.moveTo(path[0].x, path[0].y);\n    for (let i = 1; i < path.length; i++) {\n      ctx.lineTo(path[i].x, path[i].y);\n    }\n    ctx.stroke();\n  };\n\n  // Setup listeners\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      console.log(\"🖼️ Canvas resized to\", canvas.width, canvas.height);\n    };\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n\n    // Receive individual draw strokes\n    socket.on(\"draw-move\", drawPath);\n\n    // Clear canvas from remote user\n    socket.on(\"clear-canvas\", () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    });\n\n    // 🔥 Load full canvas history\n    socket.on(\"load-drawing\", drawingData => {\n      console.log(\"🗂️ Loading previous drawing history...\");\n      drawingData.forEach(cmd => {\n        var _cmd$data, _cmd$data$path;\n        if (cmd.type === \"stroke\" && (_cmd$data = cmd.data) !== null && _cmd$data !== void 0 && (_cmd$data$path = _cmd$data.path) !== null && _cmd$data$path !== void 0 && _cmd$data$path.length) {\n          drawPath({\n            path: cmd.data.path,\n            color: cmd.data.color,\n            width: cmd.data.width\n          });\n        } else if (cmd.type === \"clear\") {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n      });\n    });\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n      socket.off(\"draw-move\");\n      socket.off(\"clear-canvas\");\n      socket.off(\"load-drawing\");\n    };\n  }, []);\n\n  // Drawing handlers\n  const path = useRef([]);\n  const startDrawing = e => {\n    setDrawing(true);\n    path.current = [getCoordinates(e)];\n  };\n  const draw = e => {\n    if (!drawing) return;\n    const point = getCoordinates(e);\n    const lastPoint = path.current[path.current.length - 1];\n    path.current.push(point);\n\n    // Local stroke\n    if (lastPoint) {\n      drawPath({\n        path: [lastPoint, point],\n        color,\n        width\n      });\n    }\n\n    // Emit partial stroke\n    socket.emit(\"draw-move\", {\n      path: [lastPoint, point],\n      color,\n      width\n    });\n  };\n  const endDrawing = () => {\n    setDrawing(false);\n    socket.emit(\"draw-end\", {\n      path: path.current,\n      color,\n      width\n    });\n    path.current = [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      zIndex: 1,\n      backgroundColor: \"#ffffff\",\n      touchAction: \"none\"\n    },\n    onMouseDown: startDrawing,\n    onMouseMove: draw,\n    onMouseUp: endDrawing,\n    onMouseLeave: endDrawing,\n    onTouchStart: startDrawing,\n    onTouchMove: draw,\n    onTouchEnd: endDrawing\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"uWPZ+e5+fHb6LTNeDcBLtmnQtOg=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","socket","jsxDEV","_jsxDEV","DrawingCanvas","roomId","color","width","_s","canvasRef","drawing","setDrawing","getCoordinates","e","_e$touches","_e$touches$","_e$touches2","_e$touches2$","rect","current","getBoundingClientRect","clientX","touches","clientY","x","left","y","top","drawPath","path","ctx","getContext","length","strokeStyle","lineWidth","lineJoin","lineCap","beginPath","moveTo","i","lineTo","stroke","canvas","resizeCanvas","window","innerWidth","height","innerHeight","console","log","addEventListener","on","clearRect","drawingData","forEach","cmd","_cmd$data","_cmd$data$path","type","data","removeEventListener","off","startDrawing","draw","point","lastPoint","push","emit","endDrawing","ref","style","position","zIndex","backgroundColor","touchAction","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/whiteboard/client/src/components/DrawingCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport socket from \"../socket\";\r\n\r\nconst DrawingCanvas = ({ roomId, color, width }) => {\r\n  const canvasRef = useRef(null);\r\n  const [drawing, setDrawing] = useState(false);\r\n\r\n  // Util to get coordinates from mouse/touch\r\n  const getCoordinates = (e) => {\r\n    const rect = canvasRef.current.getBoundingClientRect();\r\n    const clientX = e.clientX || e.touches?.[0]?.clientX;\r\n    const clientY = e.clientY || e.touches?.[0]?.clientY;\r\n    return {\r\n      x: clientX - rect.left,\r\n      y: clientY - rect.top,\r\n    };\r\n  };\r\n\r\n  // Local canvas draw utility\r\n  const drawPath = ({ path, color, width }) => {\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n    if (!path || path.length < 2) return;\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = width;\r\n    ctx.lineJoin = \"round\";\r\n    ctx.lineCap = \"round\";\r\n    ctx.beginPath();\r\n    ctx.moveTo(path[0].x, path[0].y);\r\n    for (let i = 1; i < path.length; i++) {\r\n      ctx.lineTo(path[i].x, path[i].y);\r\n    }\r\n    ctx.stroke();\r\n  };\r\n\r\n  // Setup listeners\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      console.log(\"🖼️ Canvas resized to\", canvas.width, canvas.height);\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n\r\n    // Receive individual draw strokes\r\n    socket.on(\"draw-move\", drawPath);\r\n\r\n    // Clear canvas from remote user\r\n    socket.on(\"clear-canvas\", () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    });\r\n\r\n    // 🔥 Load full canvas history\r\n    socket.on(\"load-drawing\", (drawingData) => {\r\n      console.log(\"🗂️ Loading previous drawing history...\");\r\n      drawingData.forEach((cmd) => {\r\n        if (cmd.type === \"stroke\" && cmd.data?.path?.length) {\r\n          drawPath({ path: cmd.data.path, color: cmd.data.color, width: cmd.data.width });\r\n        } else if (cmd.type === \"clear\") {\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n      socket.off(\"draw-move\");\r\n      socket.off(\"clear-canvas\");\r\n      socket.off(\"load-drawing\");\r\n    };\r\n  }, []);\r\n\r\n  // Drawing handlers\r\n  const path = useRef([]);\r\n\r\n  const startDrawing = (e) => {\r\n    setDrawing(true);\r\n    path.current = [getCoordinates(e)];\r\n  };\r\n\r\n  const draw = (e) => {\r\n    if (!drawing) return;\r\n\r\n    const point = getCoordinates(e);\r\n    const lastPoint = path.current[path.current.length - 1];\r\n    path.current.push(point);\r\n\r\n    // Local stroke\r\n    if (lastPoint) {\r\n      drawPath({ path: [lastPoint, point], color, width });\r\n    }\r\n\r\n    // Emit partial stroke\r\n    socket.emit(\"draw-move\", {\r\n      path: [lastPoint, point],\r\n      color,\r\n      width,\r\n    });\r\n  };\r\n\r\n  const endDrawing = () => {\r\n    setDrawing(false);\r\n\r\n    socket.emit(\"draw-end\", {\r\n      path: path.current,\r\n      color,\r\n      width,\r\n    });\r\n\r\n    path.current = [];\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      style={{\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        zIndex: 1,\r\n        backgroundColor: \"#ffffff\",\r\n        touchAction: \"none\",\r\n      }}\r\n      onMouseDown={startDrawing}\r\n      onMouseMove={draw}\r\n      onMouseUp={endDrawing}\r\n      onMouseLeave={endDrawing}\r\n      onTouchStart={startDrawing}\r\n      onTouchMove={draw}\r\n      onTouchEnd={endDrawing}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DrawingCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}