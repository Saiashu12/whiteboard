{"ast":null,"code":"var _jsxFileName = \"C:\\\\whiteboard\\\\client\\\\src\\\\components\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport socket from \"../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingCanvas = ({\n  roomId,\n  color,\n  width\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [drawing, setDrawing] = useState(false);\n  const path = useRef([]);\n\n  // Convert screen coords to normalized [0–1]\n  const getCoordinates = e => {\n    var _e$touches, _e$touches$, _e$touches2, _e$touches2$;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const clientX = e.clientX || ((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : (_e$touches$ = _e$touches[0]) === null || _e$touches$ === void 0 ? void 0 : _e$touches$.clientX);\n    const clientY = e.clientY || ((_e$touches2 = e.touches) === null || _e$touches2 === void 0 ? void 0 : (_e$touches2$ = _e$touches2[0]) === null || _e$touches2$ === void 0 ? void 0 : _e$touches2$.clientY);\n    return {\n      x: (clientX - rect.left) / canvas.width,\n      y: (clientY - rect.top) / canvas.height\n    };\n  };\n\n  // Draw a stroke with normalized points\n  const drawPath = ({\n    path,\n    color,\n    width\n  }) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!path || path.length < 2) return;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineJoin = \"round\";\n    ctx.lineCap = \"round\";\n    ctx.beginPath();\n    ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n    for (let i = 1; i < path.length; i++) {\n      ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n    }\n    ctx.stroke();\n  };\n\n  // Resize canvas without clearing it\n  const resizeCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n    const image = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.width = window.innerWidth - 4;\n    canvas.height = window.innerHeight - 100 - 4;\n    ctx.putImageData(image, 0, 0);\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n    socket.on(\"draw-move\", drawPath);\n    socket.on(\"clear-canvas\", () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    });\n    socket.on(\"load-drawing\", drawingData => {\n      drawingData.forEach(cmd => {\n        if (cmd.type === \"stroke\") {\n          drawPath(cmd.data);\n        } else if (cmd.type === \"clear\") {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n      });\n    });\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n      socket.off(\"draw-move\");\n      socket.off(\"clear-canvas\");\n      socket.off(\"load-drawing\");\n    };\n  }, []);\n\n  // Handlers\n  const startDrawing = e => {\n    setDrawing(true);\n    path.current = [getCoordinates(e)];\n  };\n  const draw = e => {\n    if (!drawing) return;\n    const point = getCoordinates(e);\n    const lastPoint = path.current[path.current.length - 1];\n    path.current.push(point);\n    if (lastPoint) {\n      drawPath({\n        path: [lastPoint, point],\n        color,\n        width\n      });\n    }\n    socket.emit(\"draw-move\", {\n      path: [lastPoint, point],\n      color,\n      width\n    });\n  };\n  const endDrawing = () => {\n    setDrawing(false);\n    socket.emit(\"draw-end\", {\n      path: path.current,\n      color,\n      width\n    });\n    path.current = [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      top: \"100px\",\n      left: \"0\",\n      width: \"100vw\",\n      height: \"calc(100vh - 100px)\",\n      backgroundColor: \"#ffffff\",\n      touchAction: \"none\",\n      border: \"2px solid #000000\",\n      boxSizing: \"border-box\"\n    },\n    onMouseDown: startDrawing,\n    onMouseMove: draw,\n    onMouseUp: endDrawing,\n    onMouseLeave: endDrawing,\n    onTouchStart: startDrawing,\n    onTouchMove: draw,\n    onTouchEnd: endDrawing\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"LwRtSakSwScIEUDE3WVvOn1dR9s=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","socket","jsxDEV","_jsxDEV","DrawingCanvas","roomId","color","width","_s","canvasRef","drawing","setDrawing","path","getCoordinates","e","_e$touches","_e$touches$","_e$touches2","_e$touches2$","canvas","current","rect","getBoundingClientRect","clientX","touches","clientY","x","left","y","top","height","drawPath","ctx","getContext","length","strokeStyle","lineWidth","lineJoin","lineCap","beginPath","moveTo","i","lineTo","stroke","resizeCanvas","willReadFrequently","image","getImageData","window","innerWidth","innerHeight","putImageData","addEventListener","on","clearRect","drawingData","forEach","cmd","type","data","removeEventListener","off","startDrawing","draw","point","lastPoint","push","emit","endDrawing","ref","style","position","backgroundColor","touchAction","border","boxSizing","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/whiteboard/client/src/components/DrawingCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport socket from \"../socket\";\r\n\r\nconst DrawingCanvas = ({ roomId, color, width }) => {\r\n  const canvasRef = useRef(null);\r\n  const [drawing, setDrawing] = useState(false);\r\n  const path = useRef([]);\r\n\r\n  // Convert screen coords to normalized [0–1]\r\n  const getCoordinates = (e) => {\r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n    const clientX = e.clientX || e.touches?.[0]?.clientX;\r\n    const clientY = e.clientY || e.touches?.[0]?.clientY;\r\n    return {\r\n      x: (clientX - rect.left) / canvas.width,\r\n      y: (clientY - rect.top) / canvas.height,\r\n    };\r\n  };\r\n\r\n  // Draw a stroke with normalized points\r\n  const drawPath = ({ path, color, width }) => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!path || path.length < 2) return;\r\n\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = width;\r\n    ctx.lineJoin = \"round\";\r\n    ctx.lineCap = \"round\";\r\n    ctx.beginPath();\r\n    ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\r\n\r\n    for (let i = 1; i < path.length; i++) {\r\n      ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\r\n    }\r\n    ctx.stroke();\r\n  };\r\n\r\n  // Resize canvas without clearing it\r\n  const resizeCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n\r\n    const image = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n    canvas.width = window.innerWidth - 4;\r\n    canvas.height = window.innerHeight - 100 - 4;\r\n\r\n    ctx.putImageData(image, 0, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    resizeCanvas();\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n\r\n    socket.on(\"draw-move\", drawPath);\r\n    socket.on(\"clear-canvas\", () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    });\r\n\r\n    socket.on(\"load-drawing\", (drawingData) => {\r\n      drawingData.forEach((cmd) => {\r\n        if (cmd.type === \"stroke\") {\r\n          drawPath(cmd.data);\r\n        } else if (cmd.type === \"clear\") {\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n      socket.off(\"draw-move\");\r\n      socket.off(\"clear-canvas\");\r\n      socket.off(\"load-drawing\");\r\n    };\r\n  }, []);\r\n\r\n  // Handlers\r\n  const startDrawing = (e) => {\r\n    setDrawing(true);\r\n    path.current = [getCoordinates(e)];\r\n  };\r\n\r\n  const draw = (e) => {\r\n    if (!drawing) return;\r\n    const point = getCoordinates(e);\r\n    const lastPoint = path.current[path.current.length - 1];\r\n    path.current.push(point);\r\n\r\n    if (lastPoint) {\r\n      drawPath({ path: [lastPoint, point], color, width });\r\n    }\r\n\r\n    socket.emit(\"draw-move\", {\r\n      path: [lastPoint, point],\r\n      color,\r\n      width,\r\n    });\r\n  };\r\n\r\n  const endDrawing = () => {\r\n    setDrawing(false);\r\n    socket.emit(\"draw-end\", {\r\n      path: path.current,\r\n      color,\r\n      width,\r\n    });\r\n    path.current = [];\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"100px\",\r\n        left: \"0\",\r\n        width: \"100vw\",\r\n        height: \"calc(100vh - 100px)\",\r\n        backgroundColor: \"#ffffff\",\r\n        touchAction: \"none\",\r\n        border: \"2px solid #000000\",\r\n        boxSizing: \"border-box\",\r\n      }}\r\n      onMouseDown={startDrawing}\r\n      onMouseMove={draw}\r\n      onMouseUp={endDrawing}\r\n      onMouseLeave={endDrawing}\r\n      onTouchStart={startDrawing}\r\n      onTouchMove={draw}\r\n      onTouchEnd={endDrawing}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DrawingCanvas;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,aAAa,GAAGA,CAAC;EAAEC,MAAM;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAMC,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMY,IAAI,GAAGb,MAAM,CAAC,EAAE,CAAC;;EAEvB;EACA,MAAMc,cAAc,GAAIC,CAAC,IAAK;IAAA,IAAAC,UAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,YAAA;IAC5B,MAAMC,MAAM,GAAGV,SAAS,CAACW,OAAO;IAChC,MAAMC,IAAI,GAAGF,MAAM,CAACG,qBAAqB,CAAC,CAAC;IAC3C,MAAMC,OAAO,GAAGT,CAAC,CAACS,OAAO,MAAAR,UAAA,GAAID,CAAC,CAACU,OAAO,cAAAT,UAAA,wBAAAC,WAAA,GAATD,UAAA,CAAY,CAAC,CAAC,cAAAC,WAAA,uBAAdA,WAAA,CAAgBO,OAAO;IACpD,MAAME,OAAO,GAAGX,CAAC,CAACW,OAAO,MAAAR,WAAA,GAAIH,CAAC,CAACU,OAAO,cAAAP,WAAA,wBAAAC,YAAA,GAATD,WAAA,CAAY,CAAC,CAAC,cAAAC,YAAA,uBAAdA,YAAA,CAAgBO,OAAO;IACpD,OAAO;MACLC,CAAC,EAAE,CAACH,OAAO,GAAGF,IAAI,CAACM,IAAI,IAAIR,MAAM,CAACZ,KAAK;MACvCqB,CAAC,EAAE,CAACH,OAAO,GAAGJ,IAAI,CAACQ,GAAG,IAAIV,MAAM,CAACW;IACnC,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAGA,CAAC;IAAEnB,IAAI;IAAEN,KAAK;IAAEC;EAAM,CAAC,KAAK;IAC3C,MAAMY,MAAM,GAAGV,SAAS,CAACW,OAAO;IAChC,MAAMY,GAAG,GAAGb,MAAM,CAACc,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACrB,IAAI,IAAIA,IAAI,CAACsB,MAAM,GAAG,CAAC,EAAE;IAE9BF,GAAG,CAACG,WAAW,GAAG7B,KAAK;IACvB0B,GAAG,CAACI,SAAS,GAAG7B,KAAK;IACrByB,GAAG,CAACK,QAAQ,GAAG,OAAO;IACtBL,GAAG,CAACM,OAAO,GAAG,OAAO;IACrBN,GAAG,CAACO,SAAS,CAAC,CAAC;IACfP,GAAG,CAACQ,MAAM,CAAC5B,IAAI,CAAC,CAAC,CAAC,CAACc,CAAC,GAAGP,MAAM,CAACZ,KAAK,EAAEK,IAAI,CAAC,CAAC,CAAC,CAACgB,CAAC,GAAGT,MAAM,CAACW,MAAM,CAAC;IAE/D,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7B,IAAI,CAACsB,MAAM,EAAEO,CAAC,EAAE,EAAE;MACpCT,GAAG,CAACU,MAAM,CAAC9B,IAAI,CAAC6B,CAAC,CAAC,CAACf,CAAC,GAAGP,MAAM,CAACZ,KAAK,EAAEK,IAAI,CAAC6B,CAAC,CAAC,CAACb,CAAC,GAAGT,MAAM,CAACW,MAAM,CAAC;IACjE;IACAE,GAAG,CAACW,MAAM,CAAC,CAAC;EACd,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMzB,MAAM,GAAGV,SAAS,CAACW,OAAO;IAChC,MAAMY,GAAG,GAAGb,MAAM,CAACc,UAAU,CAAC,IAAI,EAAE;MAAEY,kBAAkB,EAAE;IAAK,CAAC,CAAC;IAEjE,MAAMC,KAAK,GAAGd,GAAG,CAACe,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE5B,MAAM,CAACZ,KAAK,EAAEY,MAAM,CAACW,MAAM,CAAC;IAEjEX,MAAM,CAACZ,KAAK,GAAGyC,MAAM,CAACC,UAAU,GAAG,CAAC;IACpC9B,MAAM,CAACW,MAAM,GAAGkB,MAAM,CAACE,WAAW,GAAG,GAAG,GAAG,CAAC;IAE5ClB,GAAG,CAACmB,YAAY,CAACL,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/B,CAAC;EAEDhD,SAAS,CAAC,MAAM;IACd,MAAMqB,MAAM,GAAGV,SAAS,CAACW,OAAO;IAChC,MAAMY,GAAG,GAAGb,MAAM,CAACc,UAAU,CAAC,IAAI,CAAC;IAEnCW,YAAY,CAAC,CAAC;IACdI,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAER,YAAY,CAAC;IAE/C3C,MAAM,CAACoD,EAAE,CAAC,WAAW,EAAEtB,QAAQ,CAAC;IAChC9B,MAAM,CAACoD,EAAE,CAAC,cAAc,EAAE,MAAM;MAC9BrB,GAAG,CAACsB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEnC,MAAM,CAACZ,KAAK,EAAEY,MAAM,CAACW,MAAM,CAAC;IAClD,CAAC,CAAC;IAEF7B,MAAM,CAACoD,EAAE,CAAC,cAAc,EAAGE,WAAW,IAAK;MACzCA,WAAW,CAACC,OAAO,CAAEC,GAAG,IAAK;QAC3B,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;UACzB3B,QAAQ,CAAC0B,GAAG,CAACE,IAAI,CAAC;QACpB,CAAC,MAAM,IAAIF,GAAG,CAACC,IAAI,KAAK,OAAO,EAAE;UAC/B1B,GAAG,CAACsB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEnC,MAAM,CAACZ,KAAK,EAAEY,MAAM,CAACW,MAAM,CAAC;QAClD;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACXkB,MAAM,CAACY,mBAAmB,CAAC,QAAQ,EAAEhB,YAAY,CAAC;MAClD3C,MAAM,CAAC4D,GAAG,CAAC,WAAW,CAAC;MACvB5D,MAAM,CAAC4D,GAAG,CAAC,cAAc,CAAC;MAC1B5D,MAAM,CAAC4D,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAY,GAAIhD,CAAC,IAAK;IAC1BH,UAAU,CAAC,IAAI,CAAC;IAChBC,IAAI,CAACQ,OAAO,GAAG,CAACP,cAAc,CAACC,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,MAAMiD,IAAI,GAAIjD,CAAC,IAAK;IAClB,IAAI,CAACJ,OAAO,EAAE;IACd,MAAMsD,KAAK,GAAGnD,cAAc,CAACC,CAAC,CAAC;IAC/B,MAAMmD,SAAS,GAAGrD,IAAI,CAACQ,OAAO,CAACR,IAAI,CAACQ,OAAO,CAACc,MAAM,GAAG,CAAC,CAAC;IACvDtB,IAAI,CAACQ,OAAO,CAAC8C,IAAI,CAACF,KAAK,CAAC;IAExB,IAAIC,SAAS,EAAE;MACblC,QAAQ,CAAC;QAAEnB,IAAI,EAAE,CAACqD,SAAS,EAAED,KAAK,CAAC;QAAE1D,KAAK;QAAEC;MAAM,CAAC,CAAC;IACtD;IAEAN,MAAM,CAACkE,IAAI,CAAC,WAAW,EAAE;MACvBvD,IAAI,EAAE,CAACqD,SAAS,EAAED,KAAK,CAAC;MACxB1D,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAM6D,UAAU,GAAGA,CAAA,KAAM;IACvBzD,UAAU,CAAC,KAAK,CAAC;IACjBV,MAAM,CAACkE,IAAI,CAAC,UAAU,EAAE;MACtBvD,IAAI,EAAEA,IAAI,CAACQ,OAAO;MAClBd,KAAK;MACLC;IACF,CAAC,CAAC;IACFK,IAAI,CAACQ,OAAO,GAAG,EAAE;EACnB,CAAC;EAED,oBACEjB,OAAA;IACEkE,GAAG,EAAE5D,SAAU;IACf6D,KAAK,EAAE;MACLC,QAAQ,EAAE,UAAU;MACpB1C,GAAG,EAAE,OAAO;MACZF,IAAI,EAAE,GAAG;MACTpB,KAAK,EAAE,OAAO;MACduB,MAAM,EAAE,qBAAqB;MAC7B0C,eAAe,EAAE,SAAS;MAC1BC,WAAW,EAAE,MAAM;MACnBC,MAAM,EAAE,mBAAmB;MAC3BC,SAAS,EAAE;IACb,CAAE;IACFC,WAAW,EAAEd,YAAa;IAC1Be,WAAW,EAAEd,IAAK;IAClBe,SAAS,EAAEV,UAAW;IACtBW,YAAY,EAAEX,UAAW;IACzBY,YAAY,EAAElB,YAAa;IAC3BmB,WAAW,EAAElB,IAAK;IAClBmB,UAAU,EAAEd;EAAW;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEN,CAAC;AAAC9E,EAAA,CAvIIJ,aAAa;AAAAmF,EAAA,GAAbnF,aAAa;AAyInB,eAAeA,aAAa;AAAC,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}